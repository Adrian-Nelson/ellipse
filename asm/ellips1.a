OSWRCH = $FFEE
COLOUR = 0

xvar_index   = $70
yvar_index   = $71
counter      = $72
multiplier   = $73
multiplicand = $77
product      = $7b

result_index        = $83
product_index       = $83
param1_index        = $84
multiplicand_index  = $84
multiplier_index    = $85
last_row_flag       = $86
!if COLOUR = 1 {
col1                = $87
col2                = $88
}

* = $2400

; ***************************************************************************************
main
;    jsr set_mode                        ;

draw_ellipse
    lda #a - variables_start            ;
    ldx #a - variables_start            ;
    ldy #aa - variables_start           ;
    jsr multiply16                      ; AA = A*A

    lda #b - variables_start            ;
    ldx #b - variables_start            ;
    ldy #bb - variables_start           ;
    jsr multiply16                      ; BB = B*B

    lda #0                              ;
    ldx #yyaa - variables_start         ;
    jsr set_variable32_to_a             ; YYAA = 0

    lda #aa - variables_start           ;
    ldx #bb - variables_start           ;
    ldy #aabb - variables_start         ;
    jsr multiply32                      ; AABB = AA*BB

    ldx #aa - variables_start           ;
    ldy #yyaa_diff - variables_start    ;
    jsr copy32                          ; YYAA_DIFF = AA


    ldx #a - variables_start            ;
    ldy #x1 - variables_start           ;
    jsr negate16                        ; X1 = -A

    lda #a - variables_start            ;
    ldx #b - variables_start            ;
    ldy #t2 - variables_start           ;
    jsr multiply16                      ; T2 = A*B

    ldx #t2 - variables_start           ;
    ldy #t1 - variables_start           ;
    jsr negate32                        ; T1 = -T2

    ldx #aabb - variables_start         ;
    ldy #tt1 - variables_start          ;
    jsr copy32                          ; TT1 = AABB

    lda #b - variables_start            ;
    ldx #t1 - variables_start           ;
    ldy #bt1 - variables_start          ;
    jsr multiply32                      ; BT1 = B*T1

    lda #s - variables_start            ;
    ldx #t1 - variables_start           ;
    ldy #st1 - variables_start          ;
    jsr multiply32                      ; ST1 = S*T1


    ldx #a - variables_start            ;
    ldy #x2 - variables_start           ;
    jsr copy16                          ; X2 = A

    ldx #aabb - variables_start         ;
    ldy #tt2 - variables_start          ;
    jsr copy32                          ; TT2=AABB

    ldx #bt1 - variables_start          ;
    ldy #bt2 - variables_start          ;
    jsr negate32                        ; BT2=-BT1

    ldx #st1 - variables_start          ;
    ldy #st2 - variables_start          ;
    jsr negate32                        ; ST2=-ST1

    lda #0                              ;
    ldx #ys - variables_start           ;
    jsr set_variable32_to_a             ; YS = 0

    ldx #bb - variables_start           ;
    ldy #bb2 - variables_start          ;
    jsr div2_32                         ; BB2 = BB/2

    lda #s - variables_start            ;
    ldx #b - variables_start            ;
    ldy #sb - variables_start           ;
    jsr multiply32                      ; SB = S*B

    lda #s - variables_start            ;
    ldx #s - variables_start            ;
    ldy #ss - variables_start           ;
    jsr multiply32                      ; SS = S*S

    lda #0                              ;
    ldx #oy1 - variables_start          ;
    jsr set_variable16_to_a             ; OY1 = 0

    lda #0                              ;
    ldx #oy2 - variables_start          ;
    jsr set_variable16_to_a             ; OY2 = 0

    ldx #x1 - variables_start           ;
    ldy #oox1 - variables_start         ;
    jsr copy16                          ; OOX1 = X1

    ldx #x2 - variables_start           ;
    ldy #oox2 - variables_start         ;
    jsr copy16                          ; OOX2 = X2

    lda #0                              ;
    ldx #odeltax1 - variables_start     ;
    jsr set_variable16_to_a             ; ODELTAX1 = 0

    lda #0                              ;
    ldx #odeltax2 - variables_start     ;
    jsr set_variable16_to_a             ; ODELTAX2 = 0

!if COLOUR = 1 {
    lda #1                              ;
    sta col1                            ;
    lda #2                              ;
    sta col2                            ;
}

    ldx #0                              ;
    lda b                               ;
    cmp #1                              ;
    bne +                               ;
    lda b+1                             ;
    bne +                               ;
    ldx #255                            ;
+
    stx last_row_flag                   ;

    lda #0                              ;
    ldx #y - variables_start            ;
    jsr set_variable16_to_a             ; Y = 0

fory_loop
    ldx #x1 - variables_start           ;
    ldy #ox1 - variables_start          ;
    jsr copy16                          ; OX1 = X1

    ldx #x2 - variables_start           ;
    ldy #ox2 - variables_start          ;
    jsr copy16                          ; OX2 = X2

    lda #aabb - variables_start         ;
    ldx #yyaa - variables_start         ;
    ldy #dd - variables_start           ; DD=AABB-YYAA
    jsr subtract32                      ;

    ; first half!
repeat_loop1
    lda t2 + 3                          ;
    bpl +                               ;
    jmp inc_x2_t2                       ; IF T2<0 THEN GOTO ...
+
    ora t2 + 2                          ;
    ora t2 + 1                          ;
    ora t2 + 0                          ;
    beq postloop1                       ; IF T2=0 THEN GOTO ...

    lda #tt2 - variables_start          ;
    ldx #dd - variables_start           ;
    ldy #d1 - variables_start           ;
    jsr subtract32                      ; D1=TT2-DD

    lda #bt2 - variables_start          ;
    ldx #bb2 - variables_start          ;
    ldy #bd - variables_start           ;
    jsr add32                           ; BD=BT2+BB2

    lda #bd - variables_start           ;
    ldx #d1 - variables_start           ;
    ldy #temp - variables_start         ;
    jsr subtract32                      ; temp = BD-D1

    lda temp+3                          ;
    bpl +                               ;
    jmp dec_x2_t2                       ; IF temp<0 THEN GOTO ...
+

    lda #bd - variables_start           ;
    ldx #d1 - variables_start           ;
    ldy #temp - variables_start         ;
    jsr add32                           ; temp = BD+D1

    lda temp+3                          ;
    bpl postloop1                       ;
    jmp inc_x2_t2                       ; IF temp<0 THEN GOTO ...

    ; postloop1
postloop1
    lda #x2 - variables_start           ;
    ldx #ox2 - variables_start          ;
    ldy #deltax2 - variables_start      ; DELTAX2 = X2-OX2
    jsr subtract16                      ;

    lda last_row_flag                   ;
    bmi after_ifs1                      ; IF Y%=B%-1:GOTO...

    lda deltax2                         ;
    cmp odeltax2                        ;
    bne +                               ;
    lda deltax2 + 1                     ;
    cmp odeltax2 + 1                    ;
    bne +                               ; IF DELTAX2%<>ODELTAX2% THEN GOTO...

    ldx #deltax2 - variables_start      ;
    ldy #temp - variables_start         ;
    jsr abs16                           ; temp=ABS(deltax2)

    lda temp + 1                        ;
    bne +                               ;
    lda temp                            ;
    cmp #2                              ;
    bcc repeat_loop2                    ; if temp<2 then GOTO...

+
    ; IF ABS(ODELTAX2%)=1 ...
    ldx #odeltax2 - variables_start     ;
    ldy #temp - variables_start         ;
    jsr abs16                           ; temp=ABS(odeltax2)
    lda temp + 1                        ;
    bne after_ifs1                      ;
    lda temp                            ;
    cmp #1                              ;
    bne after_ifs1                      ; IF temp<>1 GOTO...

    ; ... AND DELTAX2%=0
    lda deltax2 + 1                     ;
    ora deltax2                         ;
    bne after_ifs1                      ; IF DELTAX2<>0 GOTO...

    ; ... AND Y%=OY2%+1
    lda #oy2 - variables_start          ;
    ldx #one - variables_start          ;
    ldy #temp - variables_start         ; temp = OY2 + 1
    jsr add16                           ;

    lda y                               ;
    cmp temp                            ;
    bne after_ifs1                      ;
    lda y + 1                           ;
    cmp temp + 1                        ;
    bne after_ifs1                      ; IF Y<>OY1+1 THEN GOTO...

    jmp post_first_half                 ; GOTO%%post_first_half%% : REM fix for consecutive vlines

after_ifs1
    lda #ox2 - variables_start          ;
    ldx #oox2 - variables_start         ;
    ldy #tempX - variables_start        ; tempX = OX2-OOX2
    jsr subtract16                      ;
    ldx #tempX - variables_start        ;
    jsr sgn16                           ; temp=SGN(temp)


!if COLOUR = 1 {
    ;GCOL3,col2%:col2%=3-col2%
    LDA col2
    JSR set_col
    LDA col2
    EOR #3
    STA col2
}

    lda #oox2 - variables_start         ;
    ldx #ox2 - variables_start          ;
    ldy #oy2 - variables_start          ;
    jsr draw_hlines                     ;

    ldx #y - variables_start            ;
    ldy #oy2 - variables_start          ;
    jsr copy16                          ; OY2%=Y%

post_first_half
    ldx #ox2 - variables_start          ;
    ldy #oox2 - variables_start         ;
    jsr copy16                          ; OOX2 = OX2

    ldx #deltax2 - variables_start      ;
    ldy #odeltax2 - variables_start     ;
    jsr copy16                          ; ODELTAX2 = DELTAX2

    ; second half!
repeat_loop2
    lda t1 + 3                          ;
    bmi ++                              ;
    ora t1 + 2                          ;
    ora t1 + 1                          ;
    ora t1 + 0                          ;
    beq +                               ; IF T=0 THEN GOTO ...
    jmp dec_x1_t1                       ; IF T>0 THEN GOTO ...
++

    lda #tt1 - variables_start          ;
    ldx #dd - variables_start           ;
    ldy #d1 - variables_start           ;
    jsr subtract32                      ; D1=TT-DD

    lda #bb2 - variables_start          ;
    ldx #bt1 - variables_start          ;
    ldy #bd - variables_start           ;
    jsr subtract32                      ; BD=BB2-BT1

    lda #bd - variables_start           ;
    ldx #d1 - variables_start           ;
    ldy #temp - variables_start         ;
    jsr subtract32                      ; temp = BD-D1

    lda temp+3                          ;
    bpl ++                              ;
    jmp inc_x1_t1                       ;
++

    lda #bd - variables_start           ;
    ldx #d1 - variables_start           ;
    ldy #temp - variables_start         ;
    jsr add32                           ; temp = BD+D1

    lda temp+3                          ;
    bpl ++                              ;
    jmp dec_x1_t1                       ;
++
+
    lda #x1 - variables_start           ;
    ldx #ox1 - variables_start          ;
    ldy #deltax1 - variables_start      ; DELTAX1 = X1-OX1
    jsr subtract16                      ;

    lda last_row_flag                   ;
    bmi after_ifs2                      ; IF Y%=B%-1:GOTO...

    ; IF DELTAX1%=ODELTAX1%
    lda deltax1                         ;
    cmp odeltax1                        ;
    bne nextif                          ;
    lda deltax1 + 1                     ;
    cmp odeltax1 + 1                    ;
    bne nextif                          ; IF DELTAX1%<>ODELTAX1% THEN GOTO...

    ldx #deltax1 - variables_start      ;
    ldy #temp - variables_start         ;
    jsr abs16                           ; temp=ABS(deltax1)

    lda temp + 1                        ;
    bne nextif                          ;
    lda temp                            ;
    cmp #2                              ;
    bcc next                            ; if temp<2 then GOTO...

nextif
    ; IF ABS(ODELTAX1%)=1 ...
    ldx #odeltax1 - variables_start     ;
    ldy #temp - variables_start         ;
    jsr abs16                           ; temp=ABS(odeltax1)
    lda temp + 1                        ;
    bne after_ifs2                      ;
    lda temp                            ;
    cmp #1                              ;
    bne after_ifs2                      ; IF temp<>1 GOTO...

    ; AND DELTAX1%=0 ...
    lda deltax1 + 1                     ;
    ora deltax1                         ;
    bne after_ifs2                      ; IF DELTAX1<>0 GOTO...

    ; AND Y%=OY1%+1 ...
    lda #oy1 - variables_start          ;
    ldx #one - variables_start          ;
    ldy #temp - variables_start         ; temp = oy1 + 1
    jsr add16                           ;

    lda y                               ;
    cmp temp                            ;
    bne after_ifs2                      ;
    lda y + 1                           ;
    cmp temp + 1                        ;
    bne after_ifs2                      ; IF Y<>OY1+1 THEN GOTO...

    ; THEN ...
    jmp post_second_half                ; we are building a straight-line segment so don't draw anything for now

after_ifs2
    lda #ox1 - variables_start          ;
    ldx #oox1 - variables_start         ;
    ldy #tempX - variables_start        ; tempX = OX1-OOX1
    jsr subtract16                      ;
    ldx #tempX - variables_start        ;
    jsr sgn16                           ; tempX=SGN(tempX)


!if COLOUR = 1 {
    ;GCOL3,col1%:col1%=3-col1%
    LDA col1
    JSR set_col
    LDA col1
    EOR #3
    STA col1
}

    lda #oox1 - variables_start         ;
    ldx #ox1 - variables_start          ;
    ldy #oy1 - variables_start          ;
    jsr draw_hlines                     ;

    ldx #y - variables_start            ;
    ldy #oy1 - variables_start          ;
    jsr copy16                          ; OY1%=Y%

post_second_half
    ldx #ox1 - variables_start          ;
    ldy #oox1 - variables_start         ;
    jsr copy16                          ; OOX1 = OX1

    ldx #deltax1 - variables_start      ;
    ldy #odeltax1 - variables_start     ;
    jsr copy16                          ; ODELTAX1 = DELTAX1

next
    lda last_row_flag                   ;
    beq +                               ;
    jmp do_last_row                     ; if (last row) THEN GOTO...
+

    ldx #st2 - variables_start          ;
    ldy #tt2 - variables_start          ;
    jsr decrement32                     ; TT2-=ST2

    ldx #st2 - variables_start          ;
    ldy #tt2 - variables_start          ;
    jsr decrement32                     ; TT2-=ST2    (again)

    ldx #ss - variables_start           ;
    ldy #tt2 - variables_start          ;
    jsr increment32                     ; TT2+=SS

    ldx #st1 - variables_start          ;
    ldy #tt1 - variables_start          ;
    jsr decrement32                     ; TT1-=ST1

    ldx #st1 - variables_start          ;
    ldy #tt1 - variables_start          ;
    jsr decrement32                     ; TT1-=ST1    (again)

    ldx #ss - variables_start           ;
    ldy #tt1 - variables_start          ;
    jsr increment32                     ; TT1+=SS

    ldx #s - variables_start            ;
    ldy #ys - variables_start           ;
    jsr increment32                     ; YS+=S

    ldx #ss - variables_start           ;
    ldy #st2 - variables_start          ;
    jsr decrement32                     ; ST2-=SS

    ldx #ss - variables_start           ;
    ldy #st1 - variables_start          ;
    jsr decrement32                     ; ST1-=SS

    ldx #yyaa_diff - variables_start    ;
    ldy #yyaa - variables_start         ;
    jsr increment32                     ; YYAA+=YYA_DIFF

    ldx #aa - variables_start           ;
    ldy #yyaa_diff - variables_start    ;
    jsr increment32                     ; YYAA_DIFF+=AA

    ldx #aa - variables_start           ;
    ldy #yyaa_diff - variables_start    ;
    jsr increment32                     ; YYAA_DIFF+=AA   (again)

    ldx #sb - variables_start           ;
    ldy #bt2 - variables_start          ;
    jsr decrement32                     ; BT2-=SB

    ldx #sb - variables_start           ;
    ldy #bt1 - variables_start          ;
    jsr decrement32                     ; BT1-=SB

    ldx #s - variables_start            ;
    ldy #t2 - variables_start           ;
    jsr decrement32                     ; T2-=S

    ldx #s - variables_start            ;
    ldy #t1 - variables_start           ;
    jsr decrement32                     ; T1-=S

    inc y                               ;
    bne +                               ;
    inc y+1                             ; Y+=1
+

    lda #y - variables_start            ;
    ldx #b - variables_start            ;
    ldy #temp - variables_start         ;
    jsr subtract16                      ; temp=Y-B

    lda temp                            ;
    and temp + 1                        ;
    cmp #255                            ;
    bne not_last                        ; if (Y-B)<>-1 GOTO...
    sta last_row_flag                   ;
not_last
    jmp fory_loop                       ; IF (B - Y) > 0 GOTO fory_loop

do_last_row
    inc y                               ;
    bne +                               ;
    inc y+1                             ; Y+=1
+

    ; finish off old line segments:
    lda #x2 - variables_start           ;
    ldx #ox2 - variables_start          ;
    ldy #tempX - variables_start        ; tempX = X2-OX2
    jsr subtract16                      ;
    ldx #tempX - variables_start        ;
    jsr sgn16                           ; tempX = SGN(tempX)

    lda #y - variables_start            ;
    ldx #one - variables_start          ;
    ldy #ym1 - variables_start          ;
    jsr subtract16                      ; ym1 = Y - 1

!if COLOUR = 1 {
    LDA col2
    JSR set_col
    LDA col2
    EOR #3
    STA col2
}

    lda #ox2 - variables_start          ;
    ldx #x2 - variables_start           ;
    ldy #ym1 - variables_start          ; MOVE  (OX2%+DX%)*4, (Y-1)*4:DRAW X2%*4, (Y-1)*4
    jsr draw_hlines                     ; MOVE -(OX2%+DX%)*4,-(Y-1)*4:DRAW-X2%*4,-(Y-1)*4


    lda #x1 - variables_start           ;
    ldx #ox1 - variables_start          ;
    ldy #tempX - variables_start        ; tempX = X1-OX1
    jsr subtract16                      ;
    ldx #tempX - variables_start        ;
    jsr sgn16                           ; tempX = SGN(tempX)

    lda #y - variables_start            ;
    ldx #one - variables_start          ;
    ldy #ym1 - variables_start          ;
    jsr subtract16                      ; ym1 = Y - 1

!if COLOUR = 1 {
    LDA col1
    JSR set_col
    LDA col1
    EOR #3
    STA col1
}

    lda #ox1 - variables_start          ;
    ldx #x1 - variables_start           ;
    ldy #ym1 - variables_start          ; MOVE  (OX1%+DX%)*4, ym1*4:DRAW X1%*4, (Y-1)*4
    jsr draw_hlines                     ; MOVE -(OX1%+DX%)*4,-ym1*4:DRAW-X1%*4,-(Y-1)*4

!if COLOUR = 1 {
    ; finish off cap and tail hlines of ellipse
    lda #3
    jsr set_col
}

    ; temp=SGN(X2%-X1%)
    lda #x2 - variables_start           ;
    ldx #x1 - variables_start           ;
    ldy #tempX - variables_start        ; tempX = X2-X1
    jsr subtract16                      ;
    ldx #tempX - variables_start        ;
    jsr sgn16                           ; tempX=SGN(tempX)

    lda #x1 - variables_start           ;
    ldx #tempX - variables_start        ;
    ldy #x1 - variables_start           ;
    jsr add16                           ; X1 += tempX

    lda #x2 - variables_start           ;
    ldx #tempX - variables_start        ;
    ldy #x2 - variables_start           ;
    jsr subtract16                      ; X2 -= tempX

    jsr draw_hline2                     ; draw lines:B=-B

    ldx #x1 - variables_start           ;
    ldy #x1 - variables_start           ;
    jsr negate16                        ; X1 = -X1

    ldx #x2 - variables_start           ;
    ldy #x2 - variables_start           ;
    jsr negate16                        ; X2 = -X2

draw_hline2
    lda #4                              ;
    sta plot_type                       ;
    ldx #x1 - variables_start           ;
    ldy #b - variables_start            ;
    jsr plot_xy                         ; MOVE  X1*4, B*4

    lda #5                              ;
    sta plot_type                       ;
    ldx #x2 - variables_start           ;
    ldy #b - variables_start            ;
    jsr plot_xy                         ; DRAW  X2*4, B*4

    ldx #b - variables_start            ;
    ldy #b - variables_start            ;
    jmp negate16                        ; B = -B

; ***************************************************************************************
inc_x2_t2
    inc x2                              ;
    bne +                               ;
    inc x2 + 1                          ; X2+=1
+
    ldx #b - variables_start            ;
    ldy #t2 - variables_start           ;
    jsr increment32                     ; T2+=B

    ldx #bt2 - variables_start          ;
    ldy #tt2 - variables_start          ;
    jsr increment32                     ; TT2+=BT2

    ldx #bt2 - variables_start          ;
    ldy #tt2 - variables_start          ;
    jsr increment32                     ; TT2+=BT2 (again)

    ldx #bb - variables_start           ;
    ldy #tt2 - variables_start          ;
    jsr increment32                     ; TT2+=BB

    ldx #bb - variables_start           ;
    ldy #bt2 - variables_start          ;
    jsr increment32                     ; BT2+=BB

    ldx #sb - variables_start           ;
    ldy #st2 - variables_start          ;
    jsr increment32                     ; ST2+=SB

    jmp repeat_loop1                    ;

; ***************************************************************************************
dec_x2_t2
    lda x2                              ;
    bne +                               ;
    dec x2 + 1                          ; X2-=1
+
    dec x2                              ;

    ldx #b - variables_start            ;
    ldy #t2 - variables_start           ;
    jsr decrement32                     ; T2-=B

    ldx #bt2 - variables_start          ;
    ldy #tt2 - variables_start          ;
    jsr decrement32                     ; TT2-=BT2

    ldx #bt2 - variables_start          ;
    ldy #tt2 - variables_start          ;
    jsr decrement32                     ; TT2-=BT2 (again)

    ldx #bb - variables_start           ;
    ldy #tt2 - variables_start          ;
    jsr increment32                     ; TT2+=BB

    ldx #bb - variables_start           ;
    ldy #bt2 - variables_start          ;
    jsr decrement32                     ; BT2-=BB

    ldx #sb - variables_start           ;
    ldy #st2 - variables_start          ;
    jsr decrement32                     ; ST2-=SB

    jmp repeat_loop1                    ;

; ***************************************************************************************
inc_x1_t1
    inc x1                              ;
    bne +                               ;
    inc x1 + 1                          ; X1+=1
+
    ldx #b - variables_start            ;
    ldy #t1 - variables_start           ;
    jsr increment32                     ; T1+=B

    ldx #bt1 - variables_start          ;
    ldy #tt1 - variables_start          ;
    jsr increment32                     ; TT1+=BT1

    ldx #bt1 - variables_start          ;
    ldy #tt1 - variables_start          ;
    jsr increment32                     ; TT1+=BT1 (again)

    ldx #bb - variables_start           ;
    ldy #tt1 - variables_start          ;
    jsr increment32                     ; TT1+=BB

    ldx #bb - variables_start           ;
    ldy #bt1 - variables_start          ;
    jsr increment32                     ; BT1+=BB

    ldx #sb - variables_start           ;
    ldy #st1 - variables_start          ;
    jsr increment32                     ; ST1+=SB

    jmp repeat_loop2                    ;

; ***************************************************************************************
dec_x1_t1
    lda x1                              ;
    bne +                               ;
    dec x1 + 1                          ; X1-=1
+
    dec x1                              ;

    ldx #b - variables_start            ;
    ldy #t1 - variables_start           ; T1-=B
    jsr decrement32                     ;

    ldx #bt1 - variables_start          ;
    ldy #tt1 - variables_start          ;
    jsr decrement32                     ; TT1-=BT1

    ldx #bt1 - variables_start          ;
    ldy #tt1 - variables_start          ;
    jsr decrement32                     ; TT1-=BT1 (again)

    ldx #bb - variables_start           ;
    ldy #tt1 - variables_start          ;
    jsr increment32                     ; TT1+=BB

    ldx #bb - variables_start           ;
    ldy #bt1 - variables_start          ;
    jsr decrement32                     ; BT1-=BB

    ldx #sb - variables_start           ;
    ldy #st1 - variables_start          ;
    jsr decrement32                     ; ST1-=SB

    jmp repeat_loop2                    ;

; ***************************************************************************************
; convert 16 bit signed value into 32 bit signed value (sign extension)
;extend32
;    lda #0                              ;
;    ldx variables_start + 1,Y           ;
;    bpl +                               ;
;    lda #255                            ;
;+
;    sta variables_start + 2,Y           ;
;    sta variables_start + 3,Y           ;
;    rts                                 ;

; ***************************************************************************************
; MOVE  (A+tempX)*4, Y*4:DRAW  X*4, (Y%-1)*4
; MOVE -(A+tempX)*4,-Y*4:DRAW -X*4,-(Y%-1)*4
; On Entry:
;   A is index for OOX1 or OOX2
;   X is index for OX1 or OX2
;   Y is index for OX2 or OY2
;   tempX is DX
draw_hlines
    stx xvar_index                      ; index for OX1 or OX2, lets say OX2 for these comments
    sty yvar_index                      ; index for OY1 or OY2, lets say OY2 for these comments
    ldx #tempX - variables_start        ;
    ldy #tempX - variables_start        ;
    jsr add16                           ; tempX+=A (adds either OOX1 or OOX2)

    lda #y - variables_start            ;
    ldx #one - variables_start          ;
    ldy #tempY - variables_start        ;
    jsr subtract16                      ; tempY=Y-1

    jsr draw_line                       ;

    ldx #tempX - variables_start        ;
    ldy #tempX - variables_start        ;
    jsr negate16                        ; tempX=-tempX

    jsr negate_coordinates              ;

    jsr draw_line                       ;

negate_coordinates
    ldx xvar_index                      ;
    ldy xvar_index                      ;
    jsr negate16                        ; X2 = -X2

    ldx yvar_index                      ;
    ldy yvar_index                      ;
    jsr negate16                        ; X2 = -X2

    ldx #tempY - variables_start        ;
    ldy #tempY - variables_start        ;
    jmp negate16                        ; tempY = -tempY

; ***************************************************************************************
; MOVE tempX*4,variable[yvar_index]*4
; DRAW variable[xvar_index]*4,(y-1)*4
draw_line
    ; IF tempX == ox2 then plot 69
;    ldx xvar_index                      ;
;    lda tempX                           ;
;    cmp variables_start,X               ;
;    bne +                               ;

;    lda tempX + 1                       ;
;    cmp variables_start + 1,X           ;
;    bne +                               ;

;    lda #69                             ; PLOT 69 for plotting a point
;    bne ++                              ; ALWAYS branch
;+

    lda #4                              ;
    sta plot_type                       ;
    ldx #tempX - variables_start        ;
    ldy yvar_index                      ;
    jsr plot_xy                         ; MOVE  tempX*4, Y*4
    lda #5                              ;
++
    sta plot_type                       ;

    ldx xvar_index                      ;
    ldy #tempY - variables_start        ;
    jmp plot_xy                         ; DRAW  X2*4, tempY*4

; ***************************************************************************************
set_mode
    ldx #0                              ;
-
    lda mode_change,X                   ;
    jsr OSWRCH                          ;
    inx                                 ;
    cpx #mode_change_end - mode_change  ;
    bne -                               ;
    rts                                 ;

; ***************************************************************************************
mode_change
    !byte 22,1
mode_change_end

; ***************************************************************************************
set_col
    tax                                 ;
    lda #18                             ;
    jsr OSWRCH                          ;
    lda #3                              ; GCOL 3,A
    jsr OSWRCH                          ;
    txa                                 ;
    jmp OSWRCH                          ;


; ***************************************************************************************
;
; Y = A * X
;
; multiplies two 32 bit unsigned integers into a 32 bit result
;
; On Entry:
;   The registers are the byte offsets from variables_start to the variables:
;   A = multiplier      (4 bytes)
;   X = multiplicand    (4 bytes)
;   Y = result          (4 bytes)
;
; ***************************************************************************************
multiply32
    sta multiplier_index                ;
    stx multiplicand_index              ;
    sty product_index                   ;

    tax
    ldy #multiplier                     ;
    jsr copy4_to_zp                     ;

    ldx multiplicand_index              ;
    ldy #multiplicand                   ;
    jsr copy4_to_zp                     ;

    lda #32                             ; set binary count to 32
    sta counter                         ;
    lda #0                              ;
    sta product + 4                     ; clear upper half of product
    sta product + 5                     ;
    sta product + 6                     ;
    sta product + 7                     ;
-
    lsr multiplier + 3                  ; shift multiplier right
    ror multiplier + 2                  ;
    ror multiplier + 1                  ;
    ror multiplier + 0                  ;
    bcc +                               ; go rotate right if c = 0

    lda product + 4                     ; get upper half of product and add multiplicand to it
    clc                                 ;
    adc multiplicand                    ;
    sta product + 4                     ;

    lda product + 5                     ;
    adc multiplicand + 1                ;
    sta product + 5                     ;

    lda product + 6                     ;
    adc multiplicand + 2                ;
    sta product + 6                     ;

    lda product + 7                     ;
    adc multiplicand + 3                ;

+
    ror                                 ; rotate partial product right
    sta product + 7                     ;
    ror product + 6                     ;
    ror product + 5                     ;
    ror product + 4                     ;
    ror product + 3                     ;
    ror product + 2                     ;
    ror product + 1                     ;
    ror product + 0                     ;
    dec counter                         ; decrement bit count and
    bne -                               ; loop until 32 bits are done

    ; copy result (4 bytes)
    ldx product_index                   ;
    ldy #3                              ;
-
    lda product,Y                       ;
    sta variables_start + 3,X           ;
    dex                                 ;
    dey                                 ;
    bpl -                               ;
    rts                                 ;

; ***************************************************************************************
plot_block
    !word 0                             ; NOTE: These bytes are reversed
    !word 0                             ; when sending to the VDU drivers
plot_type
    !byte 5                             ; PLOT type
    !byte 25                            ; VDU 25 for PLOT

; ***************************************************************************************
; PLOT plot_type, centreX + variables[X],centreY + variables[Y]
plot_xy
    lda variables_start,X               ;
    clc                                 ;
    adc centrex                         ;
    sta plot_block + 3                  ;
    lda variables_start + 1,X           ;
    adc centrex + 1                     ;
    sta plot_block + 2                  ;
    lda variables_start,Y               ;
    clc                                 ;
    adc centrey                         ;
    sta plot_block + 1                  ;
    lda variables_start + 1,Y           ;
    adc centrey + 1                     ;
    sta plot_block + 0                  ;

    asl plot_block + 1                  ;
    rol plot_block                      ;
    asl plot_block + 1                  ;
    rol plot_block                      ; multiply coordinates by four
    asl plot_block + 3                  ;
    rol plot_block + 2                  ;
    asl plot_block + 3                  ;
    rol plot_block + 2                  ;

    ldx #5                              ;
-
    lda plot_block,X                    ;
    jsr OSWRCH                          ;
    dex                                 ;
    bpl -                               ;
    rts                                 ;

; ***************************************************************************************
copy4_to_zp
    lda variables_start,X               ;
    sta $00,Y                           ;
    lda variables_start + 1,X           ;
    sta $01,Y                           ;
    lda variables_start + 2,X           ;
    sta $02,Y                           ;
    lda variables_start + 3,X           ;
    sta $03,Y                           ;
    rts                                 ;

; ***************************************************************************************
copy2_to_zp
    lda variables_start,X               ;
    sta $00,Y                           ;
    lda variables_start + 1,X           ;
    sta $01,Y                           ;
    rts                                 ;

; ***************************************************************************************
set_variable16_to_a
    sta variables_start,X               ;
    lda #0                              ;
    sta variables_start + 1,X           ;
    rts                                 ;

; ***************************************************************************************
set_variable32_to_a
    sta variables_start,X               ;
    lda #0                              ;
    sta variables_start + 1,X           ;
    sta variables_start + 2,X           ;
    sta variables_start + 3,X           ;
    rts                                 ;

; ***************************************************************************************
just_copy
    sta variables_start + 1,Y           ;
    lda variables_start,X               ;
    sta variables_start,Y               ;
    rts                                 ;

; ***************************************************************************************
abs16
    lda variables_start + 1,X           ;
    bpl just_copy                       ;
    ; fall through...

; ***************************************************************************************
;
; Y = -X
;
; ***************************************************************************************
negate16
    lda #0                              ;
    sec                                 ;
    sbc variables_start,X               ;
    sta variables_start,Y               ;
    lda #0                              ;
    sbc variables_start + 1,X           ;
    sta variables_start + 1,Y           ;
    rts                                 ;

; ***************************************************************************************
;
; Y = -X
;
; ***************************************************************************************
negate32
    lda #0                              ;
    sec                                 ;
    sbc variables_start,X               ;
    sta variables_start,Y               ;
    lda #0                              ;
    sbc variables_start + 1,X           ;
    sta variables_start + 1,Y           ;
    lda #0                              ;
    sbc variables_start + 2,X           ;
    sta variables_start + 2,Y           ;
    lda #0                              ;
    sbc variables_start + 3,X           ;
    sta variables_start + 3,Y           ;
    rts                                 ;

; ***************************************************************************************
;
; Y = X
;
; ***************************************************************************************
copy32
    lda variables_start + 3,X           ;
    sta variables_start + 3,Y           ;
    lda variables_start + 2,X           ;
    sta variables_start + 2,Y           ;
copy16
    lda variables_start + 1,X           ;
    sta variables_start + 1,Y           ;
    lda variables_start,X               ;
    sta variables_start,Y               ;
    rts                                 ;

; ***************************************************************************************
;
; Y = A-X
;
; ***************************************************************************************
subtract16
    sty result_index                    ;
    sta param1_index                    ;
    tay                                 ;

    lda variables_start,Y               ;
    sec                                 ;
    sbc variables_start,X               ;
    ldy result_index                    ;
    sta variables_start,Y               ;
    ldy param1_index                    ;
    lda variables_start + 1,Y           ;
    sbc variables_start + 1,X           ;
    ldy result_index                    ;
    sta variables_start + 1,Y           ;
    rts                                 ;

; ***************************************************************************************
;
; Y = A-X
;
; ***************************************************************************************
subtract32
    sty result_index                    ;
    sta param1_index                    ;
    tay                                 ;

    lda variables_start,Y               ;
    sec                                 ;
    sbc variables_start,X               ;
    ldy result_index                    ;
    sta variables_start,Y               ;

    ldy param1_index                    ;
    lda variables_start + 1,Y           ;
    sbc variables_start + 1,X           ;
    ldy result_index                    ;
    sta variables_start + 1,Y           ;

    ldy param1_index                    ;
    lda variables_start + 2,Y           ;
    sbc variables_start + 2,X           ;
    ldy result_index                    ;
    sta variables_start + 2,Y           ;

    ldy param1_index                    ;
    lda variables_start + 3,Y           ;
    sbc variables_start + 3,X           ;
    ldy result_index                    ;
    sta variables_start + 3,Y           ;
    rts                                 ;

; ***************************************************************************************
;
; Y = Y-X
;
; ***************************************************************************************
decrement32
    lda variables_start,Y               ;
    sec                                 ;
    sbc variables_start,X               ;
    sta variables_start,Y               ;
    lda variables_start + 1,Y           ;
    sbc variables_start + 1,X           ;
    sta variables_start + 1,Y           ;

    lda variables_start + 2,Y           ;
    sbc variables_start + 2,X           ;
    sta variables_start + 2,Y           ;

    lda variables_start + 3,Y           ;
    sbc variables_start + 3,X           ;
    sta variables_start + 3,Y           ;
    rts                                 ;

; ***************************************************************************************
;
; Y = A+X
;
; ***************************************************************************************
add32
    sty result_index                    ;
    sta param1_index                    ;
    tay                                 ;

    lda variables_start,Y               ;
    clc                                 ;
    adc variables_start,X               ;
    ldy result_index                    ;
    sta variables_start,Y               ;

    ldy param1_index                    ;
    lda variables_start + 1,Y           ;
    adc variables_start + 1,X           ;
    ldy result_index                    ;
    sta variables_start + 1,Y           ;

    ldy param1_index                    ;
    lda variables_start + 2,Y           ;
    adc variables_start + 2,X           ;
    ldy result_index                    ;
    sta variables_start + 2,Y           ;

    ldy param1_index                    ;
    lda variables_start + 3,Y           ;
    adc variables_start + 3,X           ;
    ldy result_index                    ;
    sta variables_start + 3,Y           ;
    rts                                 ;

; ***************************************************************************************
;
; Y = Y+X
;
; ***************************************************************************************
increment32
    lda variables_start,Y               ;
    clc                                 ;
    adc variables_start,X               ;
    sta variables_start,Y               ;

    lda variables_start + 1,Y           ;
    adc variables_start + 1,X           ;
    sta variables_start + 1,Y           ;

    lda variables_start + 2,Y           ;
    adc variables_start + 2,X           ;
    sta variables_start + 2,Y           ;

    lda variables_start + 3,Y           ;
    adc variables_start + 3,X           ;
    sta variables_start + 3,Y           ;
    rts                                 ;

; ***************************************************************************************
;
; Y = A+X
; preserves X
;
; ***************************************************************************************
add16
    sty result_index                    ;
    sta param1_index                    ;
    tay                                 ;

    lda variables_start,Y               ;
    clc                                 ;
    adc variables_start,X               ;
    ldy result_index                    ;
    sta variables_start,Y               ;

    ldy param1_index                    ;
    lda variables_start + 1,Y           ;
    adc variables_start + 1,X           ;
    ldy result_index                    ;
    sta variables_start + 1,Y           ;

    rts                                 ;

; ***************************************************************************************
sgn16
    lda variables_start + 1,X           ;
    bmi negative                        ;
    bne positive                        ;
    ora variables_start + 0,X           ;
    beq iszero                          ;
    ; fall through...

positive
    lda #1                              ;
    sta variables_start + 0,X           ;
    lda #0                              ;
    sta variables_start + 1,X           ;
    rts                                 ;

negative
    lda #255                            ;
    ; fall through...

iszero
    sta variables_start + 0,X           ;
    sta variables_start + 1,X           ;
    rts                                 ;

; ***************************************************************************************
;
; Y = X/2
;
; ***************************************************************************************
div2_32
    lda variables_start + 3,X           ;
    lsr                                 ;
    sta variables_start + 3,Y           ;
    lda variables_start + 2,X           ;
    ror                                 ;
    sta variables_start + 2,Y           ;
div2_16
    lda variables_start + 1,X           ;
    ror                                 ;
    sta variables_start + 1,Y           ;
    lda variables_start + 0,X           ;
    ror                                 ;
    sta variables_start + 0,Y           ;
    rts                                 ;

; ***************************************************************************************
;
; Y = A * X
;
; multiplies two 16 bit unsigned integers into a 32 bit result
;
; On Entry:
;   The registers are the byte offsets from variables_start to the variables:
;   A = multiplier      (2 bytes)
;   X = multiplicand    (2 bytes)
;   Y = result          (4 bytes)
;
; ***************************************************************************************
multiply16
    sta multiplier_index                ;
    stx multiplicand_index              ;
    sty product_index                   ;

    tax
    ldy #multiplier                     ;
    jsr copy2_to_zp                     ;

    ldx multiplicand_index              ;
    ldy #multiplicand                   ;
    jsr copy2_to_zp                     ;

    lda #16                             ; set binary count to 32
    sta counter                         ;
    lda #0                              ;
    sta product + 2                     ; clear upper half of product
    sta product + 3                     ;
-
    lsr multiplier + 1                  ; shift multiplier right
    ror multiplier + 0                  ;
    bcc +                               ; go rotate right if c = 0

    lda product + 2                     ; get upper half of product and add multiplicand to it
    clc                                 ;
    adc multiplicand                    ;
    sta product + 2                     ;

    lda product + 3                     ;
    adc multiplicand + 1                ;

+
    ror                                 ; rotate partial product right
    sta product + 3                     ;
    ror product + 2                     ;
    ror product + 1                     ;
    ror product + 0                     ;
    dec counter                         ; decrement bit count and
    bne -                               ; loop until 16 bits are done

    ; copy result (4 bytes)
    ldx product_index                   ;
    ldy #3                              ;
-
    lda product,Y                       ;
    sta variables_start + 3,X           ;
    dex                                 ;
    dey                                 ;
    bpl -                               ;
    rts                                 ;

variables_start
; ***************************************************************************************
; inputs
centrex
    !word 160
centrey
    !word 128
a
    !word 58
b
    !word 100
zero
    !word 0         ; padding (always zero), used to make multiply32 work on b
s
    !le32 -20

; workspace variables
x1
    !word 0
x2
    !word 0
ox1
    !word 0
ox2
    !word 0
oox1
    !word 0
oox2
    !word 0
deltax1
    !word 0
deltax2
    !word 0
odeltax1
    !word 0
odeltax2
    !word 0
y
    !word 0
oy1
    !word 0
oy2
    !word 0
ym1
    !word 0
aa
    !le32 0
bb
    !le32 0
bb2
    !le32 0
bd
    !le32 0
dd
    !le32 0
d1
    !le32 0
ys
    !le32 0
t1
    !le32 0
t2
    !le32 0
tt1
    !le32 0
tt2
    !le32 0
temp
    !le32 0
tempX
    !le32 0
tempY
    !le32 0
yyaa
    !le32 0
yyaa_diff
    !le32 0
aabb
    !le32 0
x1b
    !le32 0
x2b
    !le32 0
st1
    !le32 0
st2
    !le32 0
ss
    !le32 0
sb
    !le32 0
bt1
    !le32 0
bt2
    !le32 0
one
    !word 1
